/*
 * Copyright 2018 Red Hat, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.quarkus.cli.commands;

import java.io.File;
import java.io.IOException;
import java.util.List;

import io.quarkus.cli.commands.file.BuildFile;
import io.quarkus.cli.commands.file.BuildFileUtil;
import org.aesh.command.Command;
import org.aesh.command.CommandDefinition;
import org.aesh.command.CommandException;
import org.aesh.command.CommandNotFoundException;
import org.aesh.command.CommandResult;
import org.aesh.command.invocation.CommandInvocation;
import org.aesh.command.option.Argument;
import org.aesh.command.option.Option;
import org.aesh.command.option.OptionList;

import org.aesh.command.parser.CommandLineParserException;
import org.aesh.command.validator.CommandValidatorException;
import org.aesh.command.validator.OptionValidatorException;

/**
 * @author <a href="mailto:stalep@gmail.com">St√•le Pedersen</a>
 */
@CommandDefinition(name = "dev-mode", description = "Starts up a development mode process for a Quarkus project.")
public class DevModeCommand implements Command<CommandInvocation> {

    @Option(shortName = 'd', completer = DevModeDebugCompleter.class, validator = DevModeDebugValidator.class, description = "If this server should be started in debug mode. "
            +
            "The default is to start in debug mode without suspending and listen on port 5005." +
            " It supports the following options:\n" +
            " \"false\" - The JVM is not started in debug mode\n" +
            " \"true\" - The JVM is started in debug mode and suspends until a debugger is attached to port 5005\n" +
            " \"client\" - The JVM is started in client mode, and attempts to connect to localhost:5005\n" +
            "\"{port}\" - The JVM is started in debug mode and suspends until a debugger is attached to {port}")
    private String debug;

    @Option(shortName = 'u', hasValue = false, name = "suspend", description = "Whether or not the JVM launch, in debug mode, should be suspended."
            + "This parameter is only relevant when the JVM is launched in debug mode.")
    private boolean suspend;

    @Option(shortName = 'b', name = "build", description = "Build folder, if not set the default folder for the used build tool will be used")
    private File buildDir;

    @Option(shortName = 's', name = "source", description = "Source folder, if not set the default folder for the used build tool will be used")
    private File sourceDir;

    @Option(name = "jvm-args", shortName = 'j', description = "JVM arguments to the dev mode process")
    private String jvmArgs;

    @Option(name = "delete-dev-jar", shortName = 'e', hasValue = false, defaultValue = {
            "true" }, description = "Delete the dev jar after it finishes")
    private boolean deleteDevJar;

    @Option(name = "prevent-no-verify", shortName = 'p', defaultValue = {
            "false" }, hasValue = false, description = "This value is intended to be set to true when some generated bytecode is eroneous causing "
                    + " the JVM to crash when the verify:non option is set (which is on by default).")
    private boolean preventNoVerify;

    @Option(name = "no-deps", shortName = 'n', hasValue = false, defaultValue = {
            "false" }, description = "Whether changes in the projects that appear to be dependencies of the project containing the "
                    + " application to be launched should trigger hot-reload. By default they do.")

    @OptionList(name = "compiler-args", shortName = 'c', description = "Additional parameters to pass to javac when recompiling changed source files.")
    private List<String> compilerArgs;

    @Argument(description = "Path to the project, if not set it will use the current working directory")
    private File projectPath;

    private BuildFile buildFile;

    @Override
    public CommandResult execute(CommandInvocation invocation) throws CommandException, InterruptedException {

        if(!verifyProjectStatus(invocation))
            return CommandResult.FAILURE;


        return CommandResult.SUCCESS;
    }

    private boolean verifyProjectStatus(CommandInvocation invocation) {

        buildFile = BuildFileUtil.findExistingBuildFile(projectPath);

        if(buildDir == null)
            buildDir = new File(buildFile.getBuildTool().getBuildDirectory());

        if (sourceDir == null)
            sourceDir = resolveSourceDir();

        if(!sourceDir.isDirectory()) {
            invocation.println("ERROR: The project's sources directory does not exists ("+sourceDir);
            return false;
        }

        if (!buildDir.isDirectory() || !new File(buildDir, "classes").isDirectory()) {
            invocation.println("Build directory ("+buildDir+" wasn't found. Compiling...");
            try {
                invocation.executeCommand("compile-project");
            }
            catch (CommandNotFoundException | CommandLineParserException | OptionValidatorException |
                    CommandValidatorException | CommandException | InterruptedException | IOException e) {
                invocation.println("Failure during compile, aborting: "+e.getMessage());
                return false;
            }
        }

        return true;
    }

    private File resolveSourceDir() {
        return new File(projectPath.getAbsolutePath() + File.separatorChar + "src"
                + File.separatorChar + "main" + File.separatorChar + "java");
    }
}
